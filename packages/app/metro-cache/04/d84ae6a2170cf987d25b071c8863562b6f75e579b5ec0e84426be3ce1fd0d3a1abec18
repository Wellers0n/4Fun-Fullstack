{"dependencies":[{"name":"./isObject","data":{"isAsync":false}},{"name":"./isSymbol","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var isObject = _$$_REQUIRE(_dependencyMap[0], \"./isObject\"),\n      isSymbol = _$$_REQUIRE(_dependencyMap[1], \"./isSymbol\");\n\n  var NAN = 0 / 0;\n  var reTrim = /^\\s+|\\s+$/g;\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n  var reIsBinary = /^0b[01]+$/i;\n  var reIsOctal = /^0o[0-7]+$/i;\n  var freeParseInt = parseInt;\n\n  function toNumber(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n\n    if (isSymbol(value)) {\n      return NAN;\n    }\n\n    if (isObject(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n      value = isObject(other) ? other + '' : other;\n    }\n\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n\n    value = value.replace(reTrim, '');\n    var isBinary = reIsBinary.test(value);\n    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n  }\n\n  module.exports = toNumber;\n});","map":[[2,0,1,0],[2,6,1,4,"isObject"],[2,14,1,12],[2,17,1,15,"require"],[2,28,1,22],[2,61,1,0],[3,0,1,0],[3,6,2,4,"isSymbol"],[3,14,2,12],[3,17,2,15,"require"],[3,28,2,22],[3,61,1,0],[5,0,5,0],[5,6,5,4,"NAN"],[5,9,5,7],[5,12,5,10],[5,16,5,14],[5,17,5,0],[6,0,8,0],[6,6,8,4,"reTrim"],[6,12,8,10],[6,15,8,13],[6,27,8,0],[7,0,11,0],[7,6,11,4,"reIsBadHex"],[7,16,11,14],[7,19,11,17],[7,39,11,0],[8,0,14,0],[8,6,14,4,"reIsBinary"],[8,16,14,14],[8,19,14,17],[8,31,14,0],[9,0,17,0],[9,6,17,4,"reIsOctal"],[9,15,17,13],[9,18,17,16],[9,31,17,0],[10,0,20,0],[10,6,20,4,"freeParseInt"],[10,18,20,16],[10,21,20,19,"parseInt"],[10,29,20,0],[12,0,45,0],[12,11,45,9,"toNumber"],[12,19,45,0],[12,20,45,18,"value"],[12,25,45,0],[12,27,45,25],[13,0,46,2],[13,8,46,6],[13,15,46,13,"value"],[13,20,46,6],[13,24,46,22],[13,32,46,2],[13,34,46,32],[14,0,47,4],[14,13,47,11,"value"],[14,18,47,4],[15,0,48,3],[17,0,49,2],[17,8,49,6,"isSymbol"],[17,16,49,14],[17,17,49,15,"value"],[17,22,49,14],[17,23,49,2],[17,25,49,23],[18,0,50,4],[18,13,50,11,"NAN"],[18,16,50,4],[19,0,51,3],[21,0,52,2],[21,8,52,6,"isObject"],[21,16,52,14],[21,17,52,15,"value"],[21,22,52,14],[21,23,52,2],[21,25,52,23],[22,0,53,4],[22,10,53,8,"other"],[22,15,53,13],[22,18,53,16],[22,25,53,23,"value"],[22,30,53,28],[22,31,53,29,"valueOf"],[22,38,53,16],[22,42,53,40],[22,52,53,16],[22,55,53,53,"value"],[22,60,53,58],[22,61,53,59,"valueOf"],[22,68,53,53],[22,70,53,16],[22,73,53,71,"value"],[22,78,53,4],[23,0,54,4,"value"],[23,6,54,4,"value"],[23,11,54,9],[23,14,54,12,"isObject"],[23,22,54,20],[23,23,54,21,"other"],[23,28,54,20],[23,29,54,12],[23,32,54,31,"other"],[23,37,54,36],[23,40,54,39],[23,42,54,12],[23,45,54,45,"other"],[23,50,54,4],[24,0,55,3],[26,0,56,2],[26,8,56,6],[26,15,56,13,"value"],[26,20,56,6],[26,24,56,22],[26,32,56,2],[26,34,56,32],[27,0,57,4],[27,13,57,11,"value"],[27,18,57,16],[27,23,57,21],[27,24,57,11],[27,27,57,25,"value"],[27,32,57,11],[27,35,57,33],[27,36,57,34,"value"],[27,41,57,4],[28,0,58,3],[30,0,59,2,"value"],[30,4,59,2,"value"],[30,9,59,7],[30,12,59,10,"value"],[30,17,59,15],[30,18,59,16,"replace"],[30,25,59,10],[30,26,59,24,"reTrim"],[30,32,59,10],[30,34,59,32],[30,36,59,10],[30,37,59,2],[31,0,60,2],[31,8,60,6,"isBinary"],[31,16,60,14],[31,19,60,17,"reIsBinary"],[31,29,60,27],[31,30,60,28,"test"],[31,34,60,17],[31,35,60,33,"value"],[31,40,60,17],[31,41,60,2],[32,0,61,2],[32,11,61,10,"isBinary"],[32,19,61,18],[32,23,61,22,"reIsOctal"],[32,32,61,31],[32,33,61,32,"test"],[32,37,61,22],[32,38,61,37,"value"],[32,43,61,22],[32,44,61,9],[32,47,62,6,"freeParseInt"],[32,59,62,18],[32,60,62,19,"value"],[32,65,62,24],[32,66,62,25,"slice"],[32,71,62,19],[32,72,62,31],[32,73,62,19],[32,74,62,18],[32,76,62,35,"isBinary"],[32,84,62,43],[32,87,62,46],[32,88,62,43],[32,91,62,50],[32,92,62,18],[32,93,61,9],[32,96,63,7,"reIsBadHex"],[32,106,63,17],[32,107,63,18,"test"],[32,111,63,7],[32,112,63,23,"value"],[32,117,63,7],[32,121,63,32,"NAN"],[32,124,63,7],[32,127,63,38],[32,128,63,39,"value"],[32,133,61,2],[33,0,64,1],[35,0,66,0,"module"],[35,2,66,0,"module"],[35,8,66,6],[35,9,66,7,"exports"],[35,16,66,0],[35,19,66,17,"toNumber"],[35,27,66,0]]},"type":"js/module"}]}