{"dependencies":[{"name":"./_Stack","data":{"isAsync":false}},{"name":"./_equalArrays","data":{"isAsync":false}},{"name":"./_equalByTag","data":{"isAsync":false}},{"name":"./_equalObjects","data":{"isAsync":false}},{"name":"./_getTag","data":{"isAsync":false}},{"name":"./isArray","data":{"isAsync":false}},{"name":"./isBuffer","data":{"isAsync":false}},{"name":"./isTypedArray","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var Stack = _$$_REQUIRE(_dependencyMap[0], \"./_Stack\"),\n      equalArrays = _$$_REQUIRE(_dependencyMap[1], \"./_equalArrays\"),\n      equalByTag = _$$_REQUIRE(_dependencyMap[2], \"./_equalByTag\"),\n      equalObjects = _$$_REQUIRE(_dependencyMap[3], \"./_equalObjects\"),\n      getTag = _$$_REQUIRE(_dependencyMap[4], \"./_getTag\"),\n      isArray = _$$_REQUIRE(_dependencyMap[5], \"./isArray\"),\n      isBuffer = _$$_REQUIRE(_dependencyMap[6], \"./isBuffer\"),\n      isTypedArray = _$$_REQUIRE(_dependencyMap[7], \"./isTypedArray\");\n\n  var COMPARE_PARTIAL_FLAG = 1;\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      objectTag = '[object Object]';\n  var objectProto = Object.prototype;\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = isArray(object),\n        othIsArr = isArray(other),\n        objTag = objIsArr ? arrayTag : getTag(object),\n        othTag = othIsArr ? arrayTag : getTag(other);\n    objTag = objTag == argsTag ? objectTag : objTag;\n    othTag = othTag == argsTag ? objectTag : othTag;\n    var objIsObj = objTag == objectTag,\n        othIsObj = othTag == objectTag,\n        isSameTag = objTag == othTag;\n\n    if (isSameTag && isBuffer(object)) {\n      if (!isBuffer(other)) {\n        return false;\n      }\n\n      objIsArr = true;\n      objIsObj = false;\n    }\n\n    if (isSameTag && !objIsObj) {\n      stack || (stack = new Stack());\n      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n    }\n\n    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n      if (objIsWrapped || othIsWrapped) {\n        var objUnwrapped = objIsWrapped ? object.value() : object,\n            othUnwrapped = othIsWrapped ? other.value() : other;\n        stack || (stack = new Stack());\n        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n      }\n    }\n\n    if (!isSameTag) {\n      return false;\n    }\n\n    stack || (stack = new Stack());\n    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n  }\n\n  module.exports = baseIsEqualDeep;\n});","map":[[2,0,1,0],[2,6,1,4,"Stack"],[2,11,1,9],[2,14,1,12,"require"],[2,25,1,19],[2,56,1,0],[3,0,1,0],[3,6,2,4,"equalArrays"],[3,17,2,15],[3,20,2,18,"require"],[3,31,2,25],[3,68,1,0],[4,0,1,0],[4,6,3,4,"equalByTag"],[4,16,3,14],[4,19,3,17,"require"],[4,30,3,24],[4,66,1,0],[5,0,1,0],[5,6,4,4,"equalObjects"],[5,18,4,16],[5,21,4,19,"require"],[5,32,4,26],[5,70,1,0],[6,0,1,0],[6,6,5,4,"getTag"],[6,12,5,10],[6,15,5,13,"require"],[6,26,5,20],[6,58,1,0],[7,0,1,0],[7,6,6,4,"isArray"],[7,13,6,11],[7,16,6,14,"require"],[7,27,6,21],[7,59,1,0],[8,0,1,0],[8,6,7,4,"isBuffer"],[8,14,7,12],[8,17,7,15,"require"],[8,28,7,22],[8,61,1,0],[9,0,1,0],[9,6,8,4,"isTypedArray"],[9,18,8,16],[9,21,8,19,"require"],[9,32,8,26],[9,69,1,0],[11,0,11,0],[11,6,11,4,"COMPARE_PARTIAL_FLAG"],[11,26,11,24],[11,29,11,27],[11,30,11,0],[12,0,14,0],[12,6,14,4,"argsTag"],[12,13,14,11],[12,16,14,14],[12,36,14,0],[13,0,14,0],[13,6,15,4,"arrayTag"],[13,14,15,12],[13,17,15,15],[13,33,14,0],[14,0,14,0],[14,6,16,4,"objectTag"],[14,15,16,13],[14,18,16,16],[14,35,14,0],[15,0,19,0],[15,6,19,4,"objectProto"],[15,17,19,15],[15,20,19,18,"Object"],[15,26,19,24],[15,27,19,25,"prototype"],[15,36,19,0],[16,0,22,0],[16,6,22,4,"hasOwnProperty"],[16,20,22,18],[16,23,22,21,"objectProto"],[16,34,22,32],[16,35,22,33,"hasOwnProperty"],[16,49,22,0],[18,0,38,0],[18,11,38,9,"baseIsEqualDeep"],[18,26,38,0],[18,27,38,25,"object"],[18,33,38,0],[18,35,38,33,"other"],[18,40,38,0],[18,42,38,40,"bitmask"],[18,49,38,0],[18,51,38,49,"customizer"],[18,61,38,0],[18,63,38,61,"equalFunc"],[18,72,38,0],[18,74,38,72,"stack"],[18,79,38,0],[18,81,38,79],[19,0,39,2],[19,8,39,6,"objIsArr"],[19,16,39,14],[19,19,39,17,"isArray"],[19,26,39,24],[19,27,39,25,"object"],[19,33,39,24],[19,34,39,2],[20,0,39,2],[20,8,40,6,"othIsArr"],[20,16,40,14],[20,19,40,17,"isArray"],[20,26,40,24],[20,27,40,25,"other"],[20,32,40,24],[20,33,39,2],[21,0,39,2],[21,8,41,6,"objTag"],[21,14,41,12],[21,17,41,15,"objIsArr"],[21,25,41,23],[21,28,41,26,"arrayTag"],[21,36,41,23],[21,39,41,37,"getTag"],[21,45,41,43],[21,46,41,44,"object"],[21,52,41,43],[21,53,39,2],[22,0,39,2],[22,8,42,6,"othTag"],[22,14,42,12],[22,17,42,15,"othIsArr"],[22,25,42,23],[22,28,42,26,"arrayTag"],[22,36,42,23],[22,39,42,37,"getTag"],[22,45,42,43],[22,46,42,44,"other"],[22,51,42,43],[22,52,39,2],[23,0,44,2,"objTag"],[23,4,44,2,"objTag"],[23,10,44,8],[23,13,44,11,"objTag"],[23,19,44,17],[23,23,44,21,"argsTag"],[23,30,44,11],[23,33,44,31,"objectTag"],[23,42,44,11],[23,45,44,43,"objTag"],[23,51,44,2],[24,0,45,2,"othTag"],[24,4,45,2,"othTag"],[24,10,45,8],[24,13,45,11,"othTag"],[24,19,45,17],[24,23,45,21,"argsTag"],[24,30,45,11],[24,33,45,31,"objectTag"],[24,42,45,11],[24,45,45,43,"othTag"],[24,51,45,2],[25,0,47,2],[25,8,47,6,"objIsObj"],[25,16,47,14],[25,19,47,17,"objTag"],[25,25,47,23],[25,29,47,27,"objectTag"],[25,38,47,2],[26,0,47,2],[26,8,48,6,"othIsObj"],[26,16,48,14],[26,19,48,17,"othTag"],[26,25,48,23],[26,29,48,27,"objectTag"],[26,38,47,2],[27,0,47,2],[27,8,49,6,"isSameTag"],[27,17,49,15],[27,20,49,18,"objTag"],[27,26,49,24],[27,30,49,28,"othTag"],[27,36,47,2],[29,0,51,2],[29,8,51,6,"isSameTag"],[29,17,51,15],[29,21,51,19,"isBuffer"],[29,29,51,27],[29,30,51,28,"object"],[29,36,51,27],[29,37,51,2],[29,39,51,37],[30,0,52,4],[30,10,52,8],[30,11,52,9,"isBuffer"],[30,19,52,17],[30,20,52,18,"other"],[30,25,52,17],[30,26,52,4],[30,28,52,26],[31,0,53,6],[31,15,53,13],[31,20,53,6],[32,0,54,5],[34,0,55,4,"objIsArr"],[34,6,55,4,"objIsArr"],[34,14,55,12],[34,17,55,15],[34,21,55,4],[35,0,56,4,"objIsObj"],[35,6,56,4,"objIsObj"],[35,14,56,12],[35,17,56,15],[35,22,56,4],[36,0,57,3],[38,0,58,2],[38,8,58,6,"isSameTag"],[38,17,58,15],[38,21,58,19],[38,22,58,20,"objIsObj"],[38,30,58,2],[38,32,58,30],[39,0,59,4,"stack"],[39,6,59,4,"stack"],[39,11,59,9],[39,16,59,14,"stack"],[39,21,59,19],[39,24,59,22],[39,28,59,26,"Stack"],[39,33,59,22],[39,35,59,9],[39,36,59,4],[40,0,60,4],[40,13,60,12,"objIsArr"],[40,21,60,20],[40,25,60,24,"isTypedArray"],[40,37,60,36],[40,38,60,37,"object"],[40,44,60,36],[40,45,60,11],[40,48,61,8,"equalArrays"],[40,59,61,19],[40,60,61,20,"object"],[40,66,61,19],[40,68,61,28,"other"],[40,73,61,19],[40,75,61,35,"bitmask"],[40,82,61,19],[40,84,61,44,"customizer"],[40,94,61,19],[40,96,61,56,"equalFunc"],[40,105,61,19],[40,107,61,67,"stack"],[40,112,61,19],[40,113,60,11],[40,116,62,8,"equalByTag"],[40,126,62,18],[40,127,62,19,"object"],[40,133,62,18],[40,135,62,27,"other"],[40,140,62,18],[40,142,62,34,"objTag"],[40,148,62,18],[40,150,62,42,"bitmask"],[40,157,62,18],[40,159,62,51,"customizer"],[40,169,62,18],[40,171,62,63,"equalFunc"],[40,180,62,18],[40,182,62,74,"stack"],[40,187,62,18],[40,188,60,4],[41,0,63,3],[43,0,64,2],[43,8,64,6],[43,10,64,8,"bitmask"],[43,17,64,15],[43,20,64,18,"COMPARE_PARTIAL_FLAG"],[43,40,64,6],[43,41,64,2],[43,43,64,41],[44,0,65,4],[44,10,65,8,"objIsWrapped"],[44,22,65,20],[44,25,65,23,"objIsObj"],[44,33,65,31],[44,37,65,35,"hasOwnProperty"],[44,51,65,49],[44,52,65,50,"call"],[44,56,65,35],[44,57,65,55,"object"],[44,63,65,35],[44,65,65,63],[44,78,65,35],[44,79,65,4],[45,0,65,4],[45,10,66,8,"othIsWrapped"],[45,22,66,20],[45,25,66,23,"othIsObj"],[45,33,66,31],[45,37,66,35,"hasOwnProperty"],[45,51,66,49],[45,52,66,50,"call"],[45,56,66,35],[45,57,66,55,"other"],[45,62,66,35],[45,64,66,62],[45,77,66,35],[45,78,65,4],[47,0,68,4],[47,10,68,8,"objIsWrapped"],[47,22,68,20],[47,26,68,24,"othIsWrapped"],[47,38,68,4],[47,40,68,38],[48,0,69,6],[48,12,69,10,"objUnwrapped"],[48,24,69,22],[48,27,69,25,"objIsWrapped"],[48,39,69,37],[48,42,69,40,"object"],[48,48,69,46],[48,49,69,47,"value"],[48,54,69,40],[48,56,69,37],[48,59,69,57,"object"],[48,65,69,6],[49,0,69,6],[49,12,70,10,"othUnwrapped"],[49,24,70,22],[49,27,70,25,"othIsWrapped"],[49,39,70,37],[49,42,70,40,"other"],[49,47,70,45],[49,48,70,46,"value"],[49,53,70,40],[49,55,70,37],[49,58,70,56,"other"],[49,63,69,6],[50,0,72,6,"stack"],[50,8,72,6,"stack"],[50,13,72,11],[50,18,72,16,"stack"],[50,23,72,21],[50,26,72,24],[50,30,72,28,"Stack"],[50,35,72,24],[50,37,72,11],[50,38,72,6],[51,0,73,6],[51,15,73,13,"equalFunc"],[51,24,73,22],[51,25,73,23,"objUnwrapped"],[51,37,73,22],[51,39,73,37,"othUnwrapped"],[51,51,73,22],[51,53,73,51,"bitmask"],[51,60,73,22],[51,62,73,60,"customizer"],[51,72,73,22],[51,74,73,72,"stack"],[51,79,73,22],[51,80,73,6],[52,0,74,5],[53,0,75,3],[55,0,76,2],[55,8,76,6],[55,9,76,7,"isSameTag"],[55,18,76,2],[55,20,76,18],[56,0,77,4],[56,13,77,11],[56,18,77,4],[57,0,78,3],[59,0,79,2,"stack"],[59,4,79,2,"stack"],[59,9,79,7],[59,14,79,12,"stack"],[59,19,79,17],[59,22,79,20],[59,26,79,24,"Stack"],[59,31,79,20],[59,33,79,7],[59,34,79,2],[60,0,80,2],[60,11,80,9,"equalObjects"],[60,23,80,21],[60,24,80,22,"object"],[60,30,80,21],[60,32,80,30,"other"],[60,37,80,21],[60,39,80,37,"bitmask"],[60,46,80,21],[60,48,80,46,"customizer"],[60,58,80,21],[60,60,80,58,"equalFunc"],[60,69,80,21],[60,71,80,69,"stack"],[60,76,80,21],[60,77,80,2],[61,0,81,1],[63,0,83,0,"module"],[63,2,83,0,"module"],[63,8,83,6],[63,9,83,7,"exports"],[63,16,83,0],[63,19,83,17,"baseIsEqualDeep"],[63,34,83,0]]},"type":"js/module"}]}