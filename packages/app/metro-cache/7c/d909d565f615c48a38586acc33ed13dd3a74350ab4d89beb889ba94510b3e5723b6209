{"dependencies":[{"name":"./_SetCache","data":{"isAsync":false}},{"name":"./_arraySome","data":{"isAsync":false}},{"name":"./_cacheHas","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var SetCache = _$$_REQUIRE(_dependencyMap[0], \"./_SetCache\"),\n      arraySome = _$$_REQUIRE(_dependencyMap[1], \"./_arraySome\"),\n      cacheHas = _$$_REQUIRE(_dependencyMap[2], \"./_cacheHas\");\n\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n        arrLength = array.length,\n        othLength = other.length;\n\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n      return false;\n    }\n\n    var stacked = stack.get(array);\n\n    if (stacked && stack.get(other)) {\n      return stacked == other;\n    }\n\n    var index = -1,\n        result = true,\n        seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;\n    stack.set(array, other);\n    stack.set(other, array);\n\n    while (++index < arrLength) {\n      var arrValue = array[index],\n          othValue = other[index];\n\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n      }\n\n      if (compared !== undefined) {\n        if (compared) {\n          continue;\n        }\n\n        result = false;\n        break;\n      }\n\n      if (seen) {\n        if (!arraySome(other, function (othValue, othIndex) {\n          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n            return seen.push(othIndex);\n          }\n        })) {\n          result = false;\n          break;\n        }\n      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n        result = false;\n        break;\n      }\n    }\n\n    stack['delete'](array);\n    stack['delete'](other);\n    return result;\n  }\n\n  module.exports = equalArrays;\n});","map":[[2,0,1,0],[2,6,1,4,"SetCache"],[2,14,1,12],[2,17,1,15,"require"],[2,28,1,22],[2,62,1,0],[3,0,1,0],[3,6,2,4,"arraySome"],[3,15,2,13],[3,18,2,16,"require"],[3,29,2,23],[3,64,1,0],[4,0,1,0],[4,6,3,4,"cacheHas"],[4,14,3,12],[4,17,3,15,"require"],[4,28,3,22],[4,62,1,0],[6,0,6,0],[6,6,6,4,"COMPARE_PARTIAL_FLAG"],[6,26,6,24],[6,29,6,27],[6,30,6,0],[7,0,6,0],[7,6,7,4,"COMPARE_UNORDERED_FLAG"],[7,28,7,26],[7,31,7,29],[7,32,6,0],[9,0,22,0],[9,11,22,9,"equalArrays"],[9,22,22,0],[9,23,22,21,"array"],[9,28,22,0],[9,30,22,28,"other"],[9,35,22,0],[9,37,22,35,"bitmask"],[9,44,22,0],[9,46,22,44,"customizer"],[9,56,22,0],[9,58,22,56,"equalFunc"],[9,67,22,0],[9,69,22,67,"stack"],[9,74,22,0],[9,76,22,74],[10,0,23,2],[10,8,23,6,"isPartial"],[10,17,23,15],[10,20,23,18,"bitmask"],[10,27,23,25],[10,30,23,28,"COMPARE_PARTIAL_FLAG"],[10,50,23,2],[11,0,23,2],[11,8,24,6,"arrLength"],[11,17,24,15],[11,20,24,18,"array"],[11,25,24,23],[11,26,24,24,"length"],[11,32,23,2],[12,0,23,2],[12,8,25,6,"othLength"],[12,17,25,15],[12,20,25,18,"other"],[12,25,25,23],[12,26,25,24,"length"],[12,32,23,2],[14,0,27,2],[14,8,27,6,"arrLength"],[14,17,27,15],[14,21,27,19,"othLength"],[14,30,27,6],[14,34,27,32],[14,36,27,34,"isPartial"],[14,45,27,43],[14,49,27,47,"othLength"],[14,58,27,56],[14,61,27,59,"arrLength"],[14,70,27,32],[14,71,27,2],[14,73,27,71],[15,0,28,4],[15,13,28,11],[15,18,28,4],[16,0,29,3],[18,0,31,2],[18,8,31,6,"stacked"],[18,15,31,13],[18,18,31,16,"stack"],[18,23,31,21],[18,24,31,22,"get"],[18,27,31,16],[18,28,31,26,"array"],[18,33,31,16],[18,34,31,2],[20,0,32,2],[20,8,32,6,"stacked"],[20,15,32,13],[20,19,32,17,"stack"],[20,24,32,22],[20,25,32,23,"get"],[20,28,32,17],[20,29,32,27,"other"],[20,34,32,17],[20,35,32,2],[20,37,32,35],[21,0,33,4],[21,13,33,11,"stacked"],[21,20,33,18],[21,24,33,22,"other"],[21,29,33,4],[22,0,34,3],[24,0,35,2],[24,8,35,6,"index"],[24,13,35,11],[24,16,35,14],[24,17,35,15],[24,18,35,2],[25,0,35,2],[25,8,36,6,"result"],[25,14,36,12],[25,17,36,15],[25,21,35,2],[26,0,35,2],[26,8,37,6,"seen"],[26,12,37,10],[26,15,37,14,"bitmask"],[26,22,37,21],[26,25,37,24,"COMPARE_UNORDERED_FLAG"],[26,47,37,13],[26,50,37,50],[26,54,37,54,"SetCache"],[26,62,37,50],[26,64,37,13],[26,67,37,65,"undefined"],[26,76,35,2],[27,0,39,2,"stack"],[27,4,39,2,"stack"],[27,9,39,7],[27,10,39,8,"set"],[27,13,39,2],[27,14,39,12,"array"],[27,19,39,2],[27,21,39,19,"other"],[27,26,39,2],[28,0,40,2,"stack"],[28,4,40,2,"stack"],[28,9,40,7],[28,10,40,8,"set"],[28,13,40,2],[28,14,40,12,"other"],[28,19,40,2],[28,21,40,19,"array"],[28,26,40,2],[30,0,43,2],[30,11,43,9],[30,13,43,11,"index"],[30,18,43,9],[30,21,43,19,"arrLength"],[30,30,43,2],[30,32,43,30],[31,0,44,4],[31,10,44,8,"arrValue"],[31,18,44,16],[31,21,44,19,"array"],[31,26,44,24],[31,27,44,25,"index"],[31,32,44,24],[31,33,44,4],[32,0,44,4],[32,10,45,8,"othValue"],[32,18,45,16],[32,21,45,19,"other"],[32,26,45,24],[32,27,45,25,"index"],[32,32,45,24],[32,33,44,4],[34,0,47,4],[34,10,47,8,"customizer"],[34,20,47,4],[34,22,47,20],[35,0,48,6],[35,12,48,10,"compared"],[35,20,48,18],[35,23,48,21,"isPartial"],[35,32,48,30],[35,35,49,10,"customizer"],[35,45,49,20],[35,46,49,21,"othValue"],[35,54,49,20],[35,56,49,31,"arrValue"],[35,64,49,20],[35,66,49,41,"index"],[35,71,49,20],[35,73,49,48,"other"],[35,78,49,20],[35,80,49,55,"array"],[35,85,49,20],[35,87,49,62,"stack"],[35,92,49,20],[35,93,48,30],[35,96,50,10,"customizer"],[35,106,50,20],[35,107,50,21,"arrValue"],[35,115,50,20],[35,117,50,31,"othValue"],[35,125,50,20],[35,127,50,41,"index"],[35,132,50,20],[35,134,50,48,"array"],[35,139,50,20],[35,141,50,55,"other"],[35,146,50,20],[35,148,50,62,"stack"],[35,153,50,20],[35,154,48,6],[36,0,51,5],[38,0,52,4],[38,10,52,8,"compared"],[38,18,52,16],[38,23,52,21,"undefined"],[38,32,52,4],[38,34,52,32],[39,0,53,6],[39,12,53,10,"compared"],[39,20,53,6],[39,22,53,20],[40,0,54,8],[41,0,55,7],[43,0,56,6,"result"],[43,8,56,6,"result"],[43,14,56,12],[43,17,56,15],[43,22,56,6],[44,0,57,6],[45,0,58,5],[47,0,60,4],[47,10,60,8,"seen"],[47,14,60,4],[47,16,60,14],[48,0,61,6],[48,12,61,10],[48,13,61,11,"arraySome"],[48,22,61,20],[48,23,61,21,"other"],[48,28,61,20],[48,30,61,28],[48,40,61,37,"othValue"],[48,48,61,28],[48,50,61,47,"othIndex"],[48,58,61,28],[48,60,61,57],[49,0,62,12],[49,14,62,16],[49,15,62,17,"cacheHas"],[49,23,62,25],[49,24,62,26,"seen"],[49,28,62,25],[49,30,62,32,"othIndex"],[49,38,62,25],[49,39,62,16],[49,44,63,17,"arrValue"],[49,52,63,25],[49,57,63,30,"othValue"],[49,65,63,17],[49,69,63,42,"equalFunc"],[49,78,63,51],[49,79,63,52,"arrValue"],[49,87,63,51],[49,89,63,62,"othValue"],[49,97,63,51],[49,99,63,72,"bitmask"],[49,106,63,51],[49,108,63,81,"customizer"],[49,118,63,51],[49,120,63,93,"stack"],[49,125,63,51],[49,126,62,16],[49,127,62,12],[49,129,63,102],[50,0,64,14],[50,19,64,21,"seen"],[50,23,64,25],[50,24,64,26,"push"],[50,28,64,21],[50,29,64,31,"othIndex"],[50,37,64,21],[50,38,64,14],[51,0,65,13],[52,0,66,11],[52,9,61,20],[52,10,61,6],[52,12,66,14],[53,0,67,8,"result"],[53,10,67,8,"result"],[53,16,67,14],[53,19,67,17],[53,24,67,8],[54,0,68,8],[55,0,69,7],[56,0,70,5],[56,7,60,4],[56,13,70,11],[56,17,70,15],[56,19,71,10,"arrValue"],[56,27,71,18],[56,32,71,23,"othValue"],[56,40,71,10],[56,44,72,12,"equalFunc"],[56,53,72,21],[56,54,72,22,"arrValue"],[56,62,72,21],[56,64,72,32,"othValue"],[56,72,72,21],[56,74,72,42,"bitmask"],[56,81,72,21],[56,83,72,51,"customizer"],[56,93,72,21],[56,95,72,63,"stack"],[56,100,72,21],[56,101,70,15],[56,102,70,11],[56,104,73,11],[57,0,74,6,"result"],[57,8,74,6,"result"],[57,14,74,12],[57,17,74,15],[57,22,74,6],[58,0,75,6],[59,0,76,5],[60,0,77,3],[62,0,78,2,"stack"],[62,4,78,2,"stack"],[62,9,78,7],[62,10,78,8],[62,18,78,7],[62,19,78,2],[62,20,78,18,"array"],[62,25,78,2],[63,0,79,2,"stack"],[63,4,79,2,"stack"],[63,9,79,7],[63,10,79,8],[63,18,79,7],[63,19,79,2],[63,20,79,18,"other"],[63,25,79,2],[64,0,80,2],[64,11,80,9,"result"],[64,17,80,2],[65,0,81,1],[67,0,83,0,"module"],[67,2,83,0,"module"],[67,8,83,6],[67,9,83,7,"exports"],[67,16,83,0],[67,19,83,17,"equalArrays"],[67,30,83,0]]},"type":"js/module"}]}