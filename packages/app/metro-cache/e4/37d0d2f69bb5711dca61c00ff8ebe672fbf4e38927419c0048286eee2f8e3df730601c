{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/get","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/objectSpread","data":{"isAsync":false}},{"name":"./AnimatedNode","data":{"isAsync":false}},{"name":"./AnimatedWithChildren","data":{"isAsync":false}},{"name":"../NativeAnimatedHelper","data":{"isAsync":false}},{"name":"invariant","data":{"isAsync":false}},{"name":"normalizeColor","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n\n  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/possibleConstructorReturn\");\n\n  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/getPrototypeOf\");\n\n  var _get = _$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/get\");\n\n  var _inherits = _$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/inherits\");\n\n  var _objectSpread = _$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/objectSpread\");\n\n  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7], \"./AnimatedNode\");\n\n  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8], \"./AnimatedWithChildren\");\n\n  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[9], \"../NativeAnimatedHelper\");\n\n  var invariant = _$$_REQUIRE(_dependencyMap[10], \"invariant\");\n\n  var normalizeColor = _$$_REQUIRE(_dependencyMap[11], \"normalizeColor\");\n\n  var linear = function linear(t) {\n    return t;\n  };\n\n  function createInterpolation(config) {\n    if (config.outputRange && typeof config.outputRange[0] === 'string') {\n      return createInterpolationFromStringOutputRange(config);\n    }\n\n    var outputRange = config.outputRange;\n    checkInfiniteRange('outputRange', outputRange);\n    var inputRange = config.inputRange;\n    checkInfiniteRange('inputRange', inputRange);\n    checkValidInputRange(inputRange);\n    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n    var easing = config.easing || linear;\n    var extrapolateLeft = 'extend';\n\n    if (config.extrapolateLeft !== undefined) {\n      extrapolateLeft = config.extrapolateLeft;\n    } else if (config.extrapolate !== undefined) {\n      extrapolateLeft = config.extrapolate;\n    }\n\n    var extrapolateRight = 'extend';\n\n    if (config.extrapolateRight !== undefined) {\n      extrapolateRight = config.extrapolateRight;\n    } else if (config.extrapolate !== undefined) {\n      extrapolateRight = config.extrapolate;\n    }\n\n    return function (input) {\n      invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n      var range = findRange(input, inputRange);\n      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n    };\n  }\n\n  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n    var result = input;\n\n    if (result < inputMin) {\n      if (extrapolateLeft === 'identity') {\n        return result;\n      } else if (extrapolateLeft === 'clamp') {\n        result = inputMin;\n      } else if (extrapolateLeft === 'extend') {}\n    }\n\n    if (result > inputMax) {\n      if (extrapolateRight === 'identity') {\n        return result;\n      } else if (extrapolateRight === 'clamp') {\n        result = inputMax;\n      } else if (extrapolateRight === 'extend') {}\n    }\n\n    if (outputMin === outputMax) {\n      return outputMin;\n    }\n\n    if (inputMin === inputMax) {\n      if (input <= inputMin) {\n        return outputMin;\n      }\n\n      return outputMax;\n    }\n\n    if (inputMin === -Infinity) {\n      result = -result;\n    } else if (inputMax === Infinity) {\n      result = result - inputMin;\n    } else {\n      result = (result - inputMin) / (inputMax - inputMin);\n    }\n\n    result = easing(result);\n\n    if (outputMin === -Infinity) {\n      result = -result;\n    } else if (outputMax === Infinity) {\n      result = result + outputMin;\n    } else {\n      result = result * (outputMax - outputMin) + outputMin;\n    }\n\n    return result;\n  }\n\n  function colorToRgba(input) {\n    var int32Color = normalizeColor(input);\n\n    if (int32Color === null) {\n      return input;\n    }\n\n    int32Color = int32Color || 0;\n    var r = (int32Color & 0xff000000) >>> 24;\n    var g = (int32Color & 0x00ff0000) >>> 16;\n    var b = (int32Color & 0x0000ff00) >>> 8;\n    var a = (int32Color & 0x000000ff) / 255;\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n  }\n\n  var stringShapeRegex = /[0-9\\.-]+/g;\n\n  function createInterpolationFromStringOutputRange(config) {\n    var outputRange = config.outputRange;\n    invariant(outputRange.length >= 2, 'Bad output range');\n    outputRange = outputRange.map(colorToRgba);\n    checkPattern(outputRange);\n    var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n      return [];\n    });\n    outputRange.forEach(function (value) {\n      value.match(stringShapeRegex).forEach(function (number, i) {\n        outputRanges[i].push(+number);\n      });\n    });\n    var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n      return createInterpolation(_objectSpread({}, config, {\n        outputRange: outputRanges[i]\n      }));\n    });\n    var shouldRound = isRgbOrRgba(outputRange[0]);\n    return function (input) {\n      var i = 0;\n      return outputRange[0].replace(stringShapeRegex, function () {\n        var val = +interpolations[i++](input);\n        var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n        return String(rounded);\n      });\n    };\n  }\n\n  function isRgbOrRgba(range) {\n    return typeof range === 'string' && range.startsWith('rgb');\n  }\n\n  function checkPattern(arr) {\n    var pattern = arr[0].replace(stringShapeRegex, '');\n\n    for (var i = 1; i < arr.length; ++i) {\n      invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n    }\n  }\n\n  function findRange(input, inputRange) {\n    var i;\n\n    for (i = 1; i < inputRange.length - 1; ++i) {\n      if (inputRange[i] >= input) {\n        break;\n      }\n    }\n\n    return i - 1;\n  }\n\n  function checkValidInputRange(arr) {\n    invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n    for (var i = 1; i < arr.length; ++i) {\n      invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically non-decreasing ' + arr);\n    }\n  }\n\n  function checkInfiniteRange(name, arr) {\n    invariant(arr.length >= 2, name + ' must have at least 2 elements');\n    invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);\n  }\n\n  var AnimatedInterpolation = function (_AnimatedWithChildren) {\n    _inherits(AnimatedInterpolation, _AnimatedWithChildren);\n\n    function AnimatedInterpolation(parent, config) {\n      var _this;\n\n      _classCallCheck(this, AnimatedInterpolation);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedInterpolation).call(this));\n      _this._parent = parent;\n      _this._config = config;\n      _this._interpolation = createInterpolation(config);\n      return _this;\n    }\n\n    _createClass(AnimatedInterpolation, [{\n      key: \"__makeNative\",\n      value: function __makeNative() {\n        this._parent.__makeNative();\n\n        _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__makeNative\", this).call(this);\n      }\n    }, {\n      key: \"__getValue\",\n      value: function __getValue() {\n        var parentValue = this._parent.__getValue();\n\n        invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n        return this._interpolation(parentValue);\n      }\n    }, {\n      key: \"interpolate\",\n      value: function interpolate(config) {\n        return new AnimatedInterpolation(this, config);\n      }\n    }, {\n      key: \"__attach\",\n      value: function __attach() {\n        this._parent.__addChild(this);\n      }\n    }, {\n      key: \"__detach\",\n      value: function __detach() {\n        this._parent.__removeChild(this);\n\n        _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__detach\", this).call(this);\n      }\n    }, {\n      key: \"__transformDataType\",\n      value: function __transformDataType(range) {\n        return range.map(NativeAnimatedHelper.transformDataType);\n      }\n    }, {\n      key: \"__getNativeConfig\",\n      value: function __getNativeConfig() {\n        if (__DEV__) {\n          NativeAnimatedHelper.validateInterpolation(this._config);\n        }\n\n        return {\n          inputRange: this._config.inputRange,\n          outputRange: this.__transformDataType(this._config.outputRange),\n          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n          type: 'interpolation'\n        };\n      }\n    }]);\n\n    return AnimatedInterpolation;\n  }(AnimatedWithChildren);\n\n  AnimatedInterpolation.__createInterpolation = createInterpolation;\n  module.exports = AnimatedInterpolation;\n});","map":[[2,0,11,0],[18,0,13,0],[18,6,13,6,"AnimatedNode"],[18,18,13,18],[18,21,13,21,"require"],[18,32,13,28],[18,69,13,0],[20,0,14,0],[20,6,14,6,"AnimatedWithChildren"],[20,26,14,26],[20,29,14,29,"require"],[20,40,14,36],[20,85,14,0],[22,0,15,0],[22,6,15,6,"NativeAnimatedHelper"],[22,26,15,26],[22,29,15,29,"require"],[22,40,15,36],[22,86,15,0],[24,0,17,0],[24,6,17,6,"invariant"],[24,15,17,15],[24,18,17,18,"require"],[24,29,17,25],[24,62,17,0],[26,0,18,0],[26,6,18,6,"normalizeColor"],[26,20,18,20],[26,23,18,23,"require"],[26,34,18,30],[26,72,18,0],[28,0,35,0],[28,6,35,6,"linear"],[28,12,35,12],[28,15,35,15],[28,24,35,6,"linear"],[28,30,35,15],[28,31,35,15,"t"],[28,32,35,16],[29,0,35,16],[29,11,35,20,"t"],[29,12,35,16],[30,0,35,16],[30,3,35,0],[32,0,41,0],[32,11,41,9,"createInterpolation"],[32,30,41,0],[32,31,42,2,"config"],[32,37,41,0],[32,39,43,38],[33,0,44,2],[33,8,44,6,"config"],[33,14,44,12],[33,15,44,13,"outputRange"],[33,26,44,6],[33,30,44,28],[33,37,44,35,"config"],[33,43,44,41],[33,44,44,42,"outputRange"],[33,55,44,35],[33,56,44,54],[33,57,44,35],[33,58,44,28],[33,63,44,61],[33,71,44,2],[33,73,44,71],[34,0,45,4],[34,13,45,11,"createInterpolationFromStringOutputRange"],[34,53,45,51],[34,54,45,52,"config"],[34,60,45,51],[34,61,45,4],[35,0,46,3],[37,0,48,2],[37,8,48,8,"outputRange"],[37,19,48,34],[37,22,48,38,"config"],[37,28,48,44],[37,29,48,45,"outputRange"],[37,40,48,2],[38,0,49,2,"checkInfiniteRange"],[38,4,49,2,"checkInfiniteRange"],[38,22,49,20],[38,23,49,21],[38,36,49,20],[38,38,49,36,"outputRange"],[38,49,49,20],[38,50,49,2],[39,0,51,2],[39,8,51,8,"inputRange"],[39,18,51,18],[39,21,51,21,"config"],[39,27,51,27],[39,28,51,28,"inputRange"],[39,38,51,2],[40,0,52,2,"checkInfiniteRange"],[40,4,52,2,"checkInfiniteRange"],[40,22,52,20],[40,23,52,21],[40,35,52,20],[40,37,52,35,"inputRange"],[40,47,52,20],[40,48,52,2],[41,0,53,2,"checkValidInputRange"],[41,4,53,2,"checkValidInputRange"],[41,24,53,22],[41,25,53,23,"inputRange"],[41,35,53,22],[41,36,53,2],[42,0,55,2,"invariant"],[42,4,55,2,"invariant"],[42,13,55,11],[42,14,56,4,"inputRange"],[42,24,56,14],[42,25,56,15,"length"],[42,31,56,4],[42,36,56,26,"outputRange"],[42,47,56,37],[42,48,56,38,"length"],[42,54,55,11],[42,56,57,4],[42,73,58,6,"inputRange"],[42,83,58,16],[42,84,58,17,"length"],[42,90,57,4],[42,93,59,6],[42,114,57,4],[42,117,60,6,"outputRange"],[42,128,60,17],[42,129,60,18,"length"],[42,135,57,4],[42,138,61,6],[42,167,55,11],[42,168,55,2],[43,0,64,2],[43,8,64,8,"easing"],[43,14,64,14],[43,17,64,17,"config"],[43,23,64,23],[43,24,64,24,"easing"],[43,30,64,17],[43,34,64,34,"linear"],[43,40,64,2],[44,0,66,2],[44,8,66,6,"extrapolateLeft"],[44,23,66,38],[44,26,66,41],[44,34,66,2],[46,0,67,2],[46,8,67,6,"config"],[46,14,67,12],[46,15,67,13,"extrapolateLeft"],[46,30,67,6],[46,35,67,33,"undefined"],[46,44,67,2],[46,46,67,44],[47,0,68,4,"extrapolateLeft"],[47,6,68,4,"extrapolateLeft"],[47,21,68,19],[47,24,68,22,"config"],[47,30,68,28],[47,31,68,29,"extrapolateLeft"],[47,46,68,4],[48,0,69,3],[48,5,67,2],[48,11,69,9],[48,15,69,13,"config"],[48,21,69,19],[48,22,69,20,"extrapolate"],[48,33,69,13],[48,38,69,36,"undefined"],[48,47,69,9],[48,49,69,47],[49,0,70,4,"extrapolateLeft"],[49,6,70,4,"extrapolateLeft"],[49,21,70,19],[49,24,70,22,"config"],[49,30,70,28],[49,31,70,29,"extrapolate"],[49,42,70,4],[50,0,71,3],[52,0,73,2],[52,8,73,6,"extrapolateRight"],[52,24,73,39],[52,27,73,42],[52,35,73,2],[54,0,74,2],[54,8,74,6,"config"],[54,14,74,12],[54,15,74,13,"extrapolateRight"],[54,31,74,6],[54,36,74,34,"undefined"],[54,45,74,2],[54,47,74,45],[55,0,75,4,"extrapolateRight"],[55,6,75,4,"extrapolateRight"],[55,22,75,20],[55,25,75,23,"config"],[55,31,75,29],[55,32,75,30,"extrapolateRight"],[55,48,75,4],[56,0,76,3],[56,5,74,2],[56,11,76,9],[56,15,76,13,"config"],[56,21,76,19],[56,22,76,20,"extrapolate"],[56,33,76,13],[56,38,76,36,"undefined"],[56,47,76,9],[56,49,76,47],[57,0,77,4,"extrapolateRight"],[57,6,77,4,"extrapolateRight"],[57,22,77,20],[57,25,77,23,"config"],[57,31,77,29],[57,32,77,30,"extrapolate"],[57,43,77,4],[58,0,78,3],[60,0,80,2],[60,11,80,9],[60,21,80,9,"input"],[60,26,80,14],[60,28,80,18],[61,0,81,4,"invariant"],[61,6,81,4,"invariant"],[61,15,81,13],[61,16,82,6],[61,23,82,13,"input"],[61,28,82,6],[61,33,82,23],[61,41,81,13],[61,43,83,6],[61,96,81,13],[61,97,81,4],[62,0,86,4],[62,10,86,10,"range"],[62,15,86,15],[62,18,86,18,"findRange"],[62,27,86,27],[62,28,86,28,"input"],[62,33,86,27],[62,35,86,35,"inputRange"],[62,45,86,27],[62,46,86,4],[63,0,87,4],[63,13,87,11,"interpolate"],[63,24,87,22],[63,25,88,6,"input"],[63,30,87,22],[63,32,89,6,"inputRange"],[63,42,89,16],[63,43,89,17,"range"],[63,48,89,16],[63,49,87,22],[63,51,90,6,"inputRange"],[63,61,90,16],[63,62,90,17,"range"],[63,67,90,22],[63,70,90,25],[63,71,90,16],[63,72,87,22],[63,74,91,6,"outputRange"],[63,85,91,17],[63,86,91,18,"range"],[63,91,91,17],[63,92,87,22],[63,94,92,6,"outputRange"],[63,105,92,17],[63,106,92,18,"range"],[63,111,92,23],[63,114,92,26],[63,115,92,17],[63,116,87,22],[63,118,93,6,"easing"],[63,124,87,22],[63,126,94,6,"extrapolateLeft"],[63,141,87,22],[63,143,95,6,"extrapolateRight"],[63,159,87,22],[63,160,87,4],[64,0,97,3],[64,5,80,2],[65,0,98,1],[67,0,100,0],[67,11,100,9,"interpolate"],[67,22,100,0],[67,23,101,2,"input"],[67,28,100,0],[67,30,102,2,"inputMin"],[67,38,100,0],[67,40,103,2,"inputMax"],[67,48,100,0],[67,50,104,2,"outputMin"],[67,59,100,0],[67,61,105,2,"outputMax"],[67,70,100,0],[67,72,106,2,"easing"],[67,78,100,0],[67,80,107,2,"extrapolateLeft"],[67,95,100,0],[67,97,108,2,"extrapolateRight"],[67,113,100,0],[67,115,109,2],[68,0,110,2],[68,8,110,6,"result"],[68,14,110,12],[68,17,110,15,"input"],[68,22,110,2],[70,0,113,2],[70,8,113,6,"result"],[70,14,113,12],[70,17,113,15,"inputMin"],[70,25,113,2],[70,27,113,25],[71,0,114,4],[71,10,114,8,"extrapolateLeft"],[71,25,114,23],[71,30,114,28],[71,40,114,4],[71,42,114,40],[72,0,115,6],[72,15,115,13,"result"],[72,21,115,6],[73,0,116,5],[73,7,114,4],[73,13,116,11],[73,17,116,15,"extrapolateLeft"],[73,32,116,30],[73,37,116,35],[73,44,116,11],[73,46,116,44],[74,0,117,6,"result"],[74,8,117,6,"result"],[74,14,117,12],[74,17,117,15,"inputMin"],[74,25,117,6],[75,0,118,5],[75,7,116,11],[75,13,118,11],[75,17,118,15,"extrapolateLeft"],[75,32,118,30],[75,37,118,35],[75,45,118,11],[75,47,118,45],[75,48,120,5],[76,0,121,3],[78,0,123,2],[78,8,123,6,"result"],[78,14,123,12],[78,17,123,15,"inputMax"],[78,25,123,2],[78,27,123,25],[79,0,124,4],[79,10,124,8,"extrapolateRight"],[79,26,124,24],[79,31,124,29],[79,41,124,4],[79,43,124,41],[80,0,125,6],[80,15,125,13,"result"],[80,21,125,6],[81,0,126,5],[81,7,124,4],[81,13,126,11],[81,17,126,15,"extrapolateRight"],[81,33,126,31],[81,38,126,36],[81,45,126,11],[81,47,126,45],[82,0,127,6,"result"],[82,8,127,6,"result"],[82,14,127,12],[82,17,127,15,"inputMax"],[82,25,127,6],[83,0,128,5],[83,7,126,11],[83,13,128,11],[83,17,128,15,"extrapolateRight"],[83,33,128,31],[83,38,128,36],[83,46,128,11],[83,48,128,46],[83,49,130,5],[84,0,131,3],[86,0,133,2],[86,8,133,6,"outputMin"],[86,17,133,15],[86,22,133,20,"outputMax"],[86,31,133,2],[86,33,133,31],[87,0,134,4],[87,13,134,11,"outputMin"],[87,22,134,4],[88,0,135,3],[90,0,137,2],[90,8,137,6,"inputMin"],[90,16,137,14],[90,21,137,19,"inputMax"],[90,29,137,2],[90,31,137,29],[91,0,138,4],[91,10,138,8,"input"],[91,15,138,13],[91,19,138,17,"inputMin"],[91,27,138,4],[91,29,138,27],[92,0,139,6],[92,15,139,13,"outputMin"],[92,24,139,6],[93,0,140,5],[95,0,141,4],[95,13,141,11,"outputMax"],[95,22,141,4],[96,0,142,3],[98,0,145,2],[98,8,145,6,"inputMin"],[98,16,145,14],[98,21,145,19],[98,22,145,20,"Infinity"],[98,30,145,2],[98,32,145,30],[99,0,146,4,"result"],[99,6,146,4,"result"],[99,12,146,10],[99,15,146,13],[99,16,146,14,"result"],[99,22,146,4],[100,0,147,3],[100,5,145,2],[100,11,147,9],[100,15,147,13,"inputMax"],[100,23,147,21],[100,28,147,26,"Infinity"],[100,36,147,9],[100,38,147,36],[101,0,148,4,"result"],[101,6,148,4,"result"],[101,12,148,10],[101,15,148,13,"result"],[101,21,148,19],[101,24,148,22,"inputMin"],[101,32,148,4],[102,0,149,3],[102,5,147,9],[102,11,149,9],[103,0,150,4,"result"],[103,6,150,4,"result"],[103,12,150,10],[103,15,150,13],[103,16,150,14,"result"],[103,22,150,20],[103,25,150,23,"inputMin"],[103,33,150,13],[103,38,150,36,"inputMax"],[103,46,150,44],[103,49,150,47,"inputMin"],[103,57,150,13],[103,58,150,4],[104,0,151,3],[106,0,154,2,"result"],[106,4,154,2,"result"],[106,10,154,8],[106,13,154,11,"easing"],[106,19,154,17],[106,20,154,18,"result"],[106,26,154,17],[106,27,154,2],[108,0,157,2],[108,8,157,6,"outputMin"],[108,17,157,15],[108,22,157,20],[108,23,157,21,"Infinity"],[108,31,157,2],[108,33,157,31],[109,0,158,4,"result"],[109,6,158,4,"result"],[109,12,158,10],[109,15,158,13],[109,16,158,14,"result"],[109,22,158,4],[110,0,159,3],[110,5,157,2],[110,11,159,9],[110,15,159,13,"outputMax"],[110,24,159,22],[110,29,159,27,"Infinity"],[110,37,159,9],[110,39,159,37],[111,0,160,4,"result"],[111,6,160,4,"result"],[111,12,160,10],[111,15,160,13,"result"],[111,21,160,19],[111,24,160,22,"outputMin"],[111,33,160,4],[112,0,161,3],[112,5,159,9],[112,11,161,9],[113,0,162,4,"result"],[113,6,162,4,"result"],[113,12,162,10],[113,15,162,13,"result"],[113,21,162,19],[113,25,162,23,"outputMax"],[113,34,162,32],[113,37,162,35,"outputMin"],[113,46,162,19],[113,47,162,13],[113,50,162,48,"outputMin"],[113,59,162,4],[114,0,163,3],[116,0,165,2],[116,11,165,9,"result"],[116,17,165,2],[117,0,166,1],[119,0,168,0],[119,11,168,9,"colorToRgba"],[119,22,168,0],[119,23,168,21,"input"],[119,28,168,0],[119,30,168,44],[120,0,169,2],[120,8,169,6,"int32Color"],[120,18,169,16],[120,21,169,19,"normalizeColor"],[120,35,169,33],[120,36,169,34,"input"],[120,41,169,33],[120,42,169,2],[122,0,170,2],[122,8,170,6,"int32Color"],[122,18,170,16],[122,23,170,21],[122,27,170,2],[122,29,170,27],[123,0,171,4],[123,13,171,11,"input"],[123,18,171,4],[124,0,172,3],[126,0,174,2,"int32Color"],[126,4,174,2,"int32Color"],[126,14,174,12],[126,17,174,15,"int32Color"],[126,27,174,25],[126,31,174,29],[126,32,174,2],[127,0,176,2],[127,8,176,8,"r"],[127,9,176,9],[127,12,176,12],[127,13,176,13,"int32Color"],[127,23,176,23],[127,26,176,26],[127,36,176,12],[127,42,176,42],[127,44,176,2],[128,0,177,2],[128,8,177,8,"g"],[128,9,177,9],[128,12,177,12],[128,13,177,13,"int32Color"],[128,23,177,23],[128,26,177,26],[128,36,177,12],[128,42,177,42],[128,44,177,2],[129,0,178,2],[129,8,178,8,"b"],[129,9,178,9],[129,12,178,12],[129,13,178,13,"int32Color"],[129,23,178,23],[129,26,178,26],[129,36,178,12],[129,42,178,42],[129,43,178,2],[130,0,179,2],[130,8,179,8,"a"],[130,9,179,9],[130,12,179,12],[130,13,179,13,"int32Color"],[130,23,179,23],[130,26,179,26],[130,36,179,12],[130,40,179,40],[130,43,179,2],[131,0,181,2],[131,21,181,17,"r"],[131,22,181,2],[131,32,181,23,"g"],[131,33,181,2],[131,43,181,29,"b"],[131,44,181,2],[131,54,181,35,"a"],[131,55,181,2],[132,0,182,1],[134,0,184,0],[134,6,184,6,"stringShapeRegex"],[134,22,184,22],[134,25,184,25],[134,37,184,0],[136,0,194,0],[136,11,194,9,"createInterpolationFromStringOutputRange"],[136,51,194,0],[136,52,195,2,"config"],[136,58,194,0],[136,60,196,29],[137,0,197,2],[137,8,197,6,"outputRange"],[137,19,197,32],[137,22,197,36,"config"],[137,28,197,42],[137,29,197,43,"outputRange"],[137,40,197,2],[138,0,198,2,"invariant"],[138,4,198,2,"invariant"],[138,13,198,11],[138,14,198,12,"outputRange"],[138,25,198,23],[138,26,198,24,"length"],[138,32,198,12],[138,36,198,34],[138,37,198,11],[138,39,198,37],[138,57,198,11],[138,58,198,2],[139,0,199,2,"outputRange"],[139,4,199,2,"outputRange"],[139,15,199,13],[139,18,199,16,"outputRange"],[139,29,199,27],[139,30,199,28,"map"],[139,33,199,16],[139,34,199,32,"colorToRgba"],[139,45,199,16],[139,46,199,2],[140,0,200,2,"checkPattern"],[140,4,200,2,"checkPattern"],[140,16,200,14],[140,17,200,15,"outputRange"],[140,28,200,14],[140,29,200,2],[141,0,213,2],[141,8,213,8,"outputRanges"],[141,20,213,20],[141,23,213,23,"outputRange"],[141,34,213,34],[141,35,213,35],[141,36,213,34],[141,37,213,23],[141,38,213,38,"match"],[141,43,213,23],[141,44,213,44,"stringShapeRegex"],[141,60,213,23],[141,62,213,62,"map"],[141,65,213,23],[141,66,213,66],[142,0,213,66],[142,13,213,72],[142,15,213,66],[143,0,213,66],[143,5,213,23],[143,6,213,2],[144,0,214,2,"outputRange"],[144,4,214,2,"outputRange"],[144,15,214,13],[144,16,214,14,"forEach"],[144,23,214,2],[144,24,214,22],[144,34,214,22,"value"],[144,39,214,27],[144,41,214,31],[145,0,218,4,"value"],[145,6,218,4,"value"],[145,11,218,9],[145,12,218,10,"match"],[145,17,218,4],[145,18,218,16,"stringShapeRegex"],[145,34,218,4],[145,36,218,34,"forEach"],[145,43,218,4],[145,44,218,42],[145,54,218,43,"number"],[145,60,218,42],[145,62,218,51,"i"],[145,63,218,42],[145,65,218,57],[146,0,219,6,"outputRanges"],[146,8,219,6,"outputRanges"],[146,20,219,18],[146,21,219,19,"i"],[146,22,219,18],[146,23,219,6],[146,24,219,22,"push"],[146,28,219,6],[146,29,219,27],[146,30,219,28,"number"],[146,36,219,6],[147,0,220,5],[147,7,218,4],[148,0,221,3],[148,5,214,2],[149,0,226,2],[149,8,226,8,"interpolations"],[149,22,226,22],[149,25,226,25,"outputRange"],[149,36,226,36],[149,37,226,37],[149,38,226,36],[149,39,226,25],[149,40,227,5,"match"],[149,45,226,25],[149,46,227,11,"stringShapeRegex"],[149,62,226,25],[149,64,228,5,"map"],[149,67,226,25],[149,68,228,9],[149,78,228,10,"value"],[149,83,228,9],[149,85,228,17,"i"],[149,86,228,9],[149,88,228,23],[150,0,229,6],[150,13,229,13,"createInterpolation"],[150,32,229,32],[150,51,230,11,"config"],[150,57,229,32],[151,0,231,8,"outputRange"],[151,8,231,8,"outputRange"],[151,19,231,19],[151,21,231,21,"outputRanges"],[151,33,231,33],[151,34,231,34,"i"],[151,35,231,33],[152,0,229,32],[152,9,229,6],[153,0,233,5],[153,5,226,25],[153,6,226,2],[154,0,237,2],[154,8,237,8,"shouldRound"],[154,19,237,19],[154,22,237,22,"isRgbOrRgba"],[154,33,237,33],[154,34,237,34,"outputRange"],[154,45,237,45],[154,46,237,46],[154,47,237,45],[154,48,237,33],[154,49,237,2],[155,0,239,2],[155,11,239,9],[155,21,239,9,"input"],[155,26,239,14],[155,28,239,18],[156,0,240,4],[156,10,240,8,"i"],[156,11,240,9],[156,14,240,12],[156,15,240,4],[157,0,244,4],[157,13,244,11,"outputRange"],[157,24,244,22],[157,25,244,23],[157,26,244,22],[157,27,244,11],[157,28,244,26,"replace"],[157,35,244,11],[157,36,244,34,"stringShapeRegex"],[157,52,244,11],[157,54,244,52],[157,66,244,58],[158,0,245,6],[158,12,245,12,"val"],[158,15,245,15],[158,18,245,18],[158,19,245,19,"interpolations"],[158,33,245,33],[158,34,245,34,"i"],[158,35,245,35],[158,37,245,33],[158,38,245,19],[158,39,245,39,"input"],[158,44,245,19],[158,45,245,6],[159,0,246,6],[159,12,246,12,"rounded"],[159,19,246,19],[159,22,247,8,"shouldRound"],[159,33,247,19],[159,37,247,23,"i"],[159,38,247,24],[159,41,247,27],[159,42,247,8],[159,45,247,31,"Math"],[159,49,247,35],[159,50,247,36,"round"],[159,55,247,31],[159,56,247,42,"val"],[159,59,247,31],[159,60,247,8],[159,63,247,49,"Math"],[159,67,247,53],[159,68,247,54,"round"],[159,73,247,49],[159,74,247,60,"val"],[159,77,247,63],[159,80,247,66],[159,84,247,49],[159,88,247,74],[159,92,246,6],[160,0,248,6],[160,15,248,13,"String"],[160,21,248,19],[160,22,248,20,"rounded"],[160,29,248,19],[160,30,248,6],[161,0,249,5],[161,7,244,11],[161,8,244,4],[162,0,250,3],[162,5,239,2],[163,0,251,1],[165,0,253,0],[165,11,253,9,"isRgbOrRgba"],[165,22,253,0],[165,23,253,21,"range"],[165,28,253,0],[165,30,253,28],[166,0,254,2],[166,11,254,9],[166,18,254,16,"range"],[166,23,254,9],[166,28,254,26],[166,36,254,9],[166,40,254,38,"range"],[166,45,254,43],[166,46,254,44,"startsWith"],[166,56,254,38],[166,57,254,55],[166,62,254,38],[166,63,254,2],[167,0,255,1],[169,0,257,0],[169,11,257,9,"checkPattern"],[169,23,257,0],[169,24,257,22,"arr"],[169,27,257,0],[169,29,257,42],[170,0,258,2],[170,8,258,8,"pattern"],[170,15,258,15],[170,18,258,18,"arr"],[170,21,258,21],[170,22,258,22],[170,23,258,21],[170,24,258,18],[170,25,258,25,"replace"],[170,32,258,18],[170,33,258,33,"stringShapeRegex"],[170,49,258,18],[170,51,258,51],[170,53,258,18],[170,54,258,2],[172,0,259,2],[172,9,259,7],[172,13,259,11,"i"],[172,14,259,12],[172,17,259,15],[172,18,259,2],[172,20,259,18,"i"],[172,21,259,19],[172,24,259,22,"arr"],[172,27,259,25],[172,28,259,26,"length"],[172,34,259,2],[172,36,259,34],[172,38,259,36,"i"],[172,39,259,2],[172,41,259,39],[173,0,260,4,"invariant"],[173,6,260,4,"invariant"],[173,15,260,13],[173,16,261,6,"pattern"],[173,23,261,13],[173,28,261,18,"arr"],[173,31,261,21],[173,32,261,22,"i"],[173,33,261,21],[173,34,261,18],[173,35,261,25,"replace"],[173,42,261,18],[173,43,261,33,"stringShapeRegex"],[173,59,261,18],[173,61,261,51],[173,63,261,18],[173,64,260,13],[173,66,262,6],[173,87,262,27,"arr"],[173,90,262,30],[173,91,262,31],[173,92,262,30],[173,93,262,6],[173,96,262,36],[173,103,262,6],[173,106,262,46,"arr"],[173,109,262,49],[173,110,262,50,"i"],[173,111,262,49],[173,112,260,13],[173,113,260,4],[174,0,264,3],[175,0,265,1],[177,0,267,0],[177,11,267,9,"findRange"],[177,20,267,0],[177,21,267,19,"input"],[177,26,267,0],[177,28,267,34,"inputRange"],[177,38,267,0],[177,40,267,61],[178,0,268,2],[178,8,268,6,"i"],[178,9,268,2],[180,0,269,2],[180,9,269,7,"i"],[180,10,269,8],[180,13,269,11],[180,14,269,2],[180,16,269,14,"i"],[180,17,269,15],[180,20,269,18,"inputRange"],[180,30,269,28],[180,31,269,29,"length"],[180,37,269,18],[180,40,269,38],[180,41,269,2],[180,43,269,41],[180,45,269,43,"i"],[180,46,269,2],[180,48,269,46],[181,0,270,4],[181,10,270,8,"inputRange"],[181,20,270,18],[181,21,270,19,"i"],[181,22,270,18],[181,23,270,8],[181,27,270,25,"input"],[181,32,270,4],[181,34,270,32],[182,0,271,6],[183,0,272,5],[184,0,273,3],[186,0,274,2],[186,11,274,9,"i"],[186,12,274,10],[186,15,274,13],[186,16,274,2],[187,0,275,1],[189,0,277,0],[189,11,277,9,"checkValidInputRange"],[189,31,277,0],[189,32,277,30,"arr"],[189,35,277,0],[189,37,277,50],[190,0,278,2,"invariant"],[190,4,278,2,"invariant"],[190,13,278,11],[190,14,278,12,"arr"],[190,17,278,15],[190,18,278,16,"length"],[190,24,278,12],[190,28,278,26],[190,29,278,11],[190,31,278,29],[190,73,278,11],[190,74,278,2],[192,0,279,2],[192,9,279,7],[192,13,279,11,"i"],[192,14,279,12],[192,17,279,15],[192,18,279,2],[192,20,279,18,"i"],[192,21,279,19],[192,24,279,22,"arr"],[192,27,279,25],[192,28,279,26,"length"],[192,34,279,2],[192,36,279,34],[192,38,279,36,"i"],[192,39,279,2],[192,41,279,39],[193,0,280,4,"invariant"],[193,6,280,4,"invariant"],[193,15,280,13],[193,16,281,6,"arr"],[193,19,281,9],[193,20,281,10,"i"],[193,21,281,9],[193,22,281,6],[193,26,281,16,"arr"],[193,29,281,19],[193,30,281,20,"i"],[193,31,281,21],[193,34,281,24],[193,35,281,19],[193,36,280,13],[193,38,288,6],[193,91,288,59,"arr"],[193,94,280,13],[193,95,280,4],[194,0,290,3],[195,0,291,1],[197,0,293,0],[197,11,293,9,"checkInfiniteRange"],[197,29,293,0],[197,30,293,28,"name"],[197,34,293,0],[197,36,293,42,"arr"],[197,39,293,0],[197,41,293,62],[198,0,294,2,"invariant"],[198,4,294,2,"invariant"],[198,13,294,11],[198,14,294,12,"arr"],[198,17,294,15],[198,18,294,16,"length"],[198,24,294,12],[198,28,294,26],[198,29,294,11],[198,31,294,29,"name"],[198,35,294,33],[198,38,294,36],[198,70,294,11],[198,71,294,2],[199,0,295,2,"invariant"],[199,4,295,2,"invariant"],[199,13,295,11],[199,14,296,4,"arr"],[199,17,296,7],[199,18,296,8,"length"],[199,24,296,4],[199,29,296,19],[199,30,296,4],[199,34,296,24,"arr"],[199,37,296,27],[199,38,296,28],[199,39,296,27],[199,40,296,24],[199,45,296,35],[199,46,296,36,"Infinity"],[199,54,296,4],[199,58,296,48,"arr"],[199,61,296,51],[199,62,296,52],[199,63,296,51],[199,64,296,48],[199,69,296,59,"Infinity"],[199,77,295,11],[199,79,303,4,"name"],[199,83,303,8],[199,86,303,11],[199,120,303,4],[199,123,303,48,"arr"],[199,126,295,11],[199,127,295,2],[200,0,305,1],[202,6,307,6,"AnimatedInterpolation"],[202,27],[205,0,315,2],[205,35,315,14,"parent"],[205,41,315,2],[205,43,315,36,"config"],[205,49,315,2],[205,51,315,69],[206,0,315,69],[208,0,315,69],[210,0,316,4],[211,0,317,4],[211,12,317,9,"_parent"],[211,19,317,4],[211,22,317,19,"parent"],[211,28,317,4],[212,0,318,4],[212,12,318,9,"_config"],[212,19,318,4],[212,22,318,19,"config"],[212,28,318,4],[213,0,319,4],[213,12,319,9,"_interpolation"],[213,26,319,4],[213,29,319,26,"createInterpolation"],[213,48,319,45],[213,49,319,46,"config"],[213,55,319,45],[213,56,319,4],[214,0,315,69],[215,0,320,3],[219,37,322,17],[220,0,323,4],[220,13,323,9,"_parent"],[220,20,323,4],[220,21,323,17,"__makeNative"],[220,33,323,4],[222,0,324,4],[223,0,325,3],[226,35,327,32],[227,0,328,4],[227,12,328,10,"parentValue"],[227,23,328,29],[227,26,328,32],[227,31,328,37,"_parent"],[227,38,328,32],[227,39,328,45,"__getValue"],[227,49,328,32],[227,51,328,4],[229,0,329,4,"invariant"],[229,8,329,4,"invariant"],[229,17,329,13],[229,18,330,6],[229,25,330,13,"parentValue"],[229,36,330,6],[229,41,330,29],[229,49,329,13],[229,51,331,6],[229,103,329,13],[229,104,329,4],[230,0,333,4],[230,15,333,11],[230,20,333,16,"_interpolation"],[230,34,333,11],[230,35,333,31,"parentValue"],[230,46,333,11],[230,47,333,4],[231,0,334,3],[234,34,336,14,"config"],[234,40],[234,42,336,70],[235,0,337,4],[235,15,337,11],[235,19,337,15,"AnimatedInterpolation"],[235,40,337,11],[235,41,337,37],[235,45,337,11],[235,47,337,43,"config"],[235,53,337,11],[235,54,337,4],[236,0,338,3],[239,33,340,19],[240,0,341,4],[240,13,341,9,"_parent"],[240,20,341,4],[240,21,341,17,"__addChild"],[240,31,341,4],[240,32,341,28],[240,36,341,4],[241,0,342,3],[244,33,344,19],[245,0,345,4],[245,13,345,9,"_parent"],[245,20,345,4],[245,21,345,17,"__removeChild"],[245,34,345,4],[245,35,345,31],[245,39,345,4],[247,0,346,4],[248,0,347,3],[251,42,349,22,"range"],[251,47],[251,49,349,41],[252,0,350,4],[252,15,350,11,"range"],[252,20,350,16],[252,21,350,17,"map"],[252,24,350,11],[252,25,350,21,"NativeAnimatedHelper"],[252,45,350,41],[252,46,350,42,"transformDataType"],[252,63,350,11],[252,64,350,4],[253,0,351,3],[256,42,353,27],[257,0,354,4],[257,12,354,8,"__DEV__"],[257,19,354,4],[257,21,354,17],[258,0,355,6,"NativeAnimatedHelper"],[258,10,355,6,"NativeAnimatedHelper"],[258,30,355,26],[258,31,355,27,"validateInterpolation"],[258,52,355,6],[258,53,355,49],[258,58,355,54,"_config"],[258,65,355,6],[259,0,356,5],[261,0,358,4],[261,15,358,11],[262,0,359,6,"inputRange"],[262,10,359,6,"inputRange"],[262,20,359,16],[262,22,359,18],[262,27,359,23,"_config"],[262,34,359,18],[262,35,359,31,"inputRange"],[262,45,358,11],[263,0,361,6,"outputRange"],[263,10,361,6,"outputRange"],[263,21,361,17],[263,23,361,19],[263,28,361,24,"__transformDataType"],[263,47,361,19],[263,48,361,44],[263,53,361,49,"_config"],[263,60,361,44],[263,61,361,57,"outputRange"],[263,72,361,19],[263,73,358,11],[264,0,362,6,"extrapolateLeft"],[264,10,362,6,"extrapolateLeft"],[264,25,362,21],[264,27,363,8],[264,32,363,13,"_config"],[264,39,363,8],[264,40,363,21,"extrapolateLeft"],[264,55,363,8],[264,59,363,40],[264,64,363,45,"_config"],[264,71,363,40],[264,72,363,53,"extrapolate"],[264,83,363,8],[264,87,363,68],[264,95,358,11],[265,0,364,6,"extrapolateRight"],[265,10,364,6,"extrapolateRight"],[265,26,364,22],[265,28,365,8],[265,33,365,13,"_config"],[265,40,365,8],[265,41,365,21,"extrapolateRight"],[265,57,365,8],[265,61,365,41],[265,66,365,46,"_config"],[265,73,365,41],[265,74,365,54,"extrapolate"],[265,85,365,8],[265,89,365,69],[265,97,358,11],[266,0,366,6,"type"],[266,10,366,6,"type"],[266,14,366,10],[266,16,366,12],[267,0,358,11],[267,9,358,4],[268,0,368,3],[272,4,307,36,"AnimatedWithChildren"],[272,24],[274,0,307,6,"AnimatedInterpolation"],[274,2,307,6,"AnimatedInterpolation"],[274,23],[274,24,309,9,"__createInterpolation"],[274,45],[274,48,309,33,"createInterpolation"],[274,67],[275,0,371,0,"module"],[275,2,371,0,"module"],[275,8,371,6],[275,9,371,7,"exports"],[275,16,371,0],[275,19,371,17,"AnimatedInterpolation"],[275,40,371,0]]},"type":"js/module"}]}