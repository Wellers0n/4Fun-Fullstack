{"dependencies":[{"name":"./_Symbol","data":{"isAsync":false}},{"name":"./_Uint8Array","data":{"isAsync":false}},{"name":"./eq","data":{"isAsync":false}},{"name":"./_equalArrays","data":{"isAsync":false}},{"name":"./_mapToArray","data":{"isAsync":false}},{"name":"./_setToArray","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var Symbol = _$$_REQUIRE(_dependencyMap[0], \"./_Symbol\"),\n      Uint8Array = _$$_REQUIRE(_dependencyMap[1], \"./_Uint8Array\"),\n      eq = _$$_REQUIRE(_dependencyMap[2], \"./eq\"),\n      equalArrays = _$$_REQUIRE(_dependencyMap[3], \"./_equalArrays\"),\n      mapToArray = _$$_REQUIRE(_dependencyMap[4], \"./_mapToArray\"),\n      setToArray = _$$_REQUIRE(_dependencyMap[5], \"./_setToArray\");\n\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n  var boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      errorTag = '[object Error]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]';\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]';\n  var symbolProto = Symbol ? typeof Symbol === \"function\" ? Symbol.prototype : \"@@prototype\" : undefined,\n      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n    switch (tag) {\n      case dataViewTag:\n        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n          return false;\n        }\n\n        object = object.buffer;\n        other = other.buffer;\n\n      case arrayBufferTag:\n        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n          return false;\n        }\n\n        return true;\n\n      case boolTag:\n      case dateTag:\n      case numberTag:\n        return eq(+object, +other);\n\n      case errorTag:\n        return object.name == other.name && object.message == other.message;\n\n      case regexpTag:\n      case stringTag:\n        return object == other + '';\n\n      case mapTag:\n        var convert = mapToArray;\n\n      case setTag:\n        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n        convert || (convert = setToArray);\n\n        if (object.size != other.size && !isPartial) {\n          return false;\n        }\n\n        var stacked = stack.get(object);\n\n        if (stacked) {\n          return stacked == other;\n        }\n\n        bitmask |= COMPARE_UNORDERED_FLAG;\n        stack.set(object, other);\n        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n        stack['delete'](object);\n        return result;\n\n      case symbolTag:\n        if (symbolValueOf) {\n          return symbolValueOf.call(object) == symbolValueOf.call(other);\n        }\n\n    }\n\n    return false;\n  }\n\n  module.exports = equalByTag;\n});","map":[[2,0,1,0],[2,6,1,4,"Symbol"],[2,12,1,10],[2,15,1,13,"require"],[2,26,1,20],[2,58,1,0],[3,0,1,0],[3,6,2,4,"Uint8Array"],[3,16,2,14],[3,19,2,17,"require"],[3,30,2,24],[3,66,1,0],[4,0,1,0],[4,6,3,4,"eq"],[4,8,3,6],[4,11,3,9,"require"],[4,22,3,16],[4,49,1,0],[5,0,1,0],[5,6,4,4,"equalArrays"],[5,17,4,15],[5,20,4,18,"require"],[5,31,4,25],[5,68,1,0],[6,0,1,0],[6,6,5,4,"mapToArray"],[6,16,5,14],[6,19,5,17,"require"],[6,30,5,24],[6,66,1,0],[7,0,1,0],[7,6,6,4,"setToArray"],[7,16,6,14],[7,19,6,17,"require"],[7,30,6,24],[7,66,1,0],[9,0,9,0],[9,6,9,4,"COMPARE_PARTIAL_FLAG"],[9,26,9,24],[9,29,9,27],[9,30,9,0],[10,0,9,0],[10,6,10,4,"COMPARE_UNORDERED_FLAG"],[10,28,10,26],[10,31,10,29],[10,32,9,0],[11,0,13,0],[11,6,13,4,"boolTag"],[11,13,13,11],[11,16,13,14],[11,34,13,0],[12,0,13,0],[12,6,14,4,"dateTag"],[12,13,14,11],[12,16,14,14],[12,31,13,0],[13,0,13,0],[13,6,15,4,"errorTag"],[13,14,15,12],[13,17,15,15],[13,33,13,0],[14,0,13,0],[14,6,16,4,"mapTag"],[14,12,16,10],[14,15,16,13],[14,29,13,0],[15,0,13,0],[15,6,17,4,"numberTag"],[15,15,17,13],[15,18,17,16],[15,35,13,0],[16,0,13,0],[16,6,18,4,"regexpTag"],[16,15,18,13],[16,18,18,16],[16,35,13,0],[17,0,13,0],[17,6,19,4,"setTag"],[17,12,19,10],[17,15,19,13],[17,29,13,0],[18,0,13,0],[18,6,20,4,"stringTag"],[18,15,20,13],[18,18,20,16],[18,35,13,0],[19,0,13,0],[19,6,21,4,"symbolTag"],[19,15,21,13],[19,18,21,16],[19,35,13,0],[20,0,23,0],[20,6,23,4,"arrayBufferTag"],[20,20,23,18],[20,23,23,21],[20,45,23,0],[21,0,23,0],[21,6,24,4,"dataViewTag"],[21,17,24,15],[21,20,24,18],[21,39,23,0],[22,0,27,0],[22,6,27,4,"symbolProto"],[22,17,27,15],[22,20,27,18,"Symbol"],[22,26,27,24],[22,60,27,27,"Symbol"],[22,66,27,33],[22,67,27,34,"prototype"],[22,76,27,24],[22,95,27,46,"undefined"],[22,104,27,0],[23,0,27,0],[23,6,28,4,"symbolValueOf"],[23,19,28,17],[23,22,28,20,"symbolProto"],[23,33,28,31],[23,36,28,34,"symbolProto"],[23,47,28,45],[23,48,28,46,"valueOf"],[23,55,28,31],[23,58,28,56,"undefined"],[23,67,27,0],[25,0,47,0],[25,11,47,9,"equalByTag"],[25,21,47,0],[25,22,47,20,"object"],[25,28,47,0],[25,30,47,28,"other"],[25,35,47,0],[25,37,47,35,"tag"],[25,40,47,0],[25,42,47,40,"bitmask"],[25,49,47,0],[25,51,47,49,"customizer"],[25,61,47,0],[25,63,47,61,"equalFunc"],[25,72,47,0],[25,74,47,72,"stack"],[25,79,47,0],[25,81,47,79],[26,0,48,2],[26,12,48,10,"tag"],[26,15,48,2],[27,0,49,4],[27,11,49,9,"dataViewTag"],[27,22,49,4],[28,0,50,6],[28,12,50,11,"object"],[28,18,50,17],[28,19,50,18,"byteLength"],[28,29,50,11],[28,33,50,32,"other"],[28,38,50,37],[28,39,50,38,"byteLength"],[28,49,50,10],[28,53,51,11,"object"],[28,59,51,17],[28,60,51,18,"byteOffset"],[28,70,51,11],[28,74,51,32,"other"],[28,79,51,37],[28,80,51,38,"byteOffset"],[28,90,50,6],[28,92,51,51],[29,0,52,8],[29,17,52,15],[29,22,52,8],[30,0,53,7],[32,0,54,6,"object"],[32,8,54,6,"object"],[32,14,54,12],[32,17,54,15,"object"],[32,23,54,21],[32,24,54,22,"buffer"],[32,30,54,6],[33,0,55,6,"other"],[33,8,55,6,"other"],[33,13,55,11],[33,16,55,14,"other"],[33,21,55,19],[33,22,55,20,"buffer"],[33,28,55,6],[35,0,57,4],[35,11,57,9,"arrayBufferTag"],[35,25,57,4],[36,0,58,6],[36,12,58,11,"object"],[36,18,58,17],[36,19,58,18,"byteLength"],[36,29,58,11],[36,33,58,32,"other"],[36,38,58,37],[36,39,58,38,"byteLength"],[36,49,58,10],[36,53,59,10],[36,54,59,11,"equalFunc"],[36,63,59,20],[36,64,59,21],[36,68,59,25,"Uint8Array"],[36,78,59,21],[36,79,59,36,"object"],[36,85,59,21],[36,86,59,20],[36,88,59,45],[36,92,59,49,"Uint8Array"],[36,102,59,45],[36,103,59,60,"other"],[36,108,59,45],[36,109,59,20],[36,110,58,6],[36,112,59,69],[37,0,60,8],[37,17,60,15],[37,22,60,8],[38,0,61,7],[40,0,62,6],[40,15,62,13],[40,19,62,6],[42,0,64,4],[42,11,64,9,"boolTag"],[42,18,64,4],[43,0,65,4],[43,11,65,9,"dateTag"],[43,18,65,4],[44,0,66,4],[44,11,66,9,"numberTag"],[44,20,66,4],[45,0,69,6],[45,15,69,13,"eq"],[45,17,69,15],[45,18,69,16],[45,19,69,17,"object"],[45,25,69,15],[45,27,69,25],[45,28,69,26,"other"],[45,33,69,15],[45,34,69,6],[47,0,71,4],[47,11,71,9,"errorTag"],[47,19,71,4],[48,0,72,6],[48,15,72,13,"object"],[48,21,72,19],[48,22,72,20,"name"],[48,26,72,13],[48,30,72,28,"other"],[48,35,72,33],[48,36,72,34,"name"],[48,40,72,13],[48,44,72,42,"object"],[48,50,72,48],[48,51,72,49,"message"],[48,58,72,42],[48,62,72,60,"other"],[48,67,72,65],[48,68,72,66,"message"],[48,75,72,6],[50,0,74,4],[50,11,74,9,"regexpTag"],[50,20,74,4],[51,0,75,4],[51,11,75,9,"stringTag"],[51,20,75,4],[52,0,79,6],[52,15,79,13,"object"],[52,21,79,19],[52,25,79,24,"other"],[52,30,79,29],[52,33,79,32],[52,35,79,6],[54,0,81,4],[54,11,81,9,"mapTag"],[54,17,81,4],[55,0,82,6],[55,12,82,10,"convert"],[55,19,82,17],[55,22,82,20,"mapToArray"],[55,32,82,6],[57,0,84,4],[57,11,84,9,"setTag"],[57,17,84,4],[58,0,85,6],[58,12,85,10,"isPartial"],[58,21,85,19],[58,24,85,22,"bitmask"],[58,31,85,29],[58,34,85,32,"COMPARE_PARTIAL_FLAG"],[58,54,85,6],[59,0,86,6,"convert"],[59,8,86,6,"convert"],[59,15,86,13],[59,20,86,18,"convert"],[59,27,86,25],[59,30,86,28,"setToArray"],[59,40,86,13],[59,41,86,6],[61,0,88,6],[61,12,88,10,"object"],[61,18,88,16],[61,19,88,17,"size"],[61,23,88,10],[61,27,88,25,"other"],[61,32,88,30],[61,33,88,31,"size"],[61,37,88,10],[61,41,88,39],[61,42,88,40,"isPartial"],[61,51,88,6],[61,53,88,51],[62,0,89,8],[62,17,89,15],[62,22,89,8],[63,0,90,7],[65,0,92,6],[65,12,92,10,"stacked"],[65,19,92,17],[65,22,92,20,"stack"],[65,27,92,25],[65,28,92,26,"get"],[65,31,92,20],[65,32,92,30,"object"],[65,38,92,20],[65,39,92,6],[67,0,93,6],[67,12,93,10,"stacked"],[67,19,93,6],[67,21,93,19],[68,0,94,8],[68,17,94,15,"stacked"],[68,24,94,22],[68,28,94,26,"other"],[68,33,94,8],[69,0,95,7],[71,0,96,6,"bitmask"],[71,8,96,6,"bitmask"],[71,15,96,13],[71,19,96,17,"COMPARE_UNORDERED_FLAG"],[71,41,96,6],[72,0,99,6,"stack"],[72,8,99,6,"stack"],[72,13,99,11],[72,14,99,12,"set"],[72,17,99,6],[72,18,99,16,"object"],[72,24,99,6],[72,26,99,24,"other"],[72,31,99,6],[73,0,100,6],[73,12,100,10,"result"],[73,18,100,16],[73,21,100,19,"equalArrays"],[73,32,100,30],[73,33,100,31,"convert"],[73,40,100,38],[73,41,100,39,"object"],[73,47,100,38],[73,48,100,30],[73,50,100,48,"convert"],[73,57,100,55],[73,58,100,56,"other"],[73,63,100,55],[73,64,100,30],[73,66,100,64,"bitmask"],[73,73,100,30],[73,75,100,73,"customizer"],[73,85,100,30],[73,87,100,85,"equalFunc"],[73,96,100,30],[73,98,100,96,"stack"],[73,103,100,30],[73,104,100,6],[74,0,101,6,"stack"],[74,8,101,6,"stack"],[74,13,101,11],[74,14,101,12],[74,22,101,11],[74,23,101,6],[74,24,101,22,"object"],[74,30,101,6],[75,0,102,6],[75,15,102,13,"result"],[75,21,102,6],[77,0,104,4],[77,11,104,9,"symbolTag"],[77,20,104,4],[78,0,105,6],[78,12,105,10,"symbolValueOf"],[78,25,105,6],[78,27,105,25],[79,0,106,8],[79,17,106,15,"symbolValueOf"],[79,30,106,28],[79,31,106,29,"call"],[79,35,106,15],[79,36,106,34,"object"],[79,42,106,15],[79,47,106,45,"symbolValueOf"],[79,60,106,58],[79,61,106,59,"call"],[79,65,106,45],[79,66,106,64,"other"],[79,71,106,45],[79,72,106,8],[80,0,107,7],[82,0,48,2],[84,0,109,2],[84,11,109,9],[84,16,109,2],[85,0,110,1],[87,0,112,0,"module"],[87,2,112,0,"module"],[87,8,112,6],[87,9,112,7,"exports"],[87,16,112,0],[87,19,112,17,"equalByTag"],[87,29,112,0]]},"type":"js/module"}]}